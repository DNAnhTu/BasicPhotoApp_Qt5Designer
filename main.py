# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import math
import random
from random import gauss
from statistics import median
import click
import cv2
from PIL import Image, ImageOps
import imutils
import matplotlib.pyplot as plt
import numpy as np
from cv2 import GaussianBlur, sqrt, threshold
from PIL import Image, ImageFilter, ImageTk
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage
from PyQt5.QtWidgets import QFileDialog, QInputDialog, QMessageBox
import mouse

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(826, 612)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(31, 40, 771, 501))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_Image = QtWidgets.QLabel(self.layoutWidget)
        self.label_Image.setBaseSize(QtCore.QSize(0, 0))
        self.label_Image.setText("")
        # self.label_Image.setPixmap(QtGui.QPixmap("images/animal.jpg"))
        self.label_Image.setObjectName("label_Image")
        self.gridLayout.addWidget(self.label_Image, 0, 0, 2, 1)
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 2, 1, 1)
        self.verticalSlider = QtWidgets.QSlider(self.layoutWidget)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.gridLayout.addWidget(self.verticalSlider, 1, 1, 1, 1)
        self.verticalSlider_2 = QtWidgets.QSlider(self.layoutWidget)
        self.verticalSlider_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_2.setObjectName("verticalSlider_2")
        self.gridLayout.addWidget(self.verticalSlider_2, 1, 2, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(248, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(68, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 2, 1, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 826, 18))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        self.menuConvert = QtWidgets.QMenu(self.menuMenu)
        self.menuConvert.setObjectName("menuConvert")
        self.menuFilter = QtWidgets.QMenu(self.menuMenu)
        self.menuFilter.setObjectName("menuFilter")
        self.menuEdge_Detection = QtWidgets.QMenu(self.menuMenu)
        self.menuEdge_Detection.setObjectName("menuEdge_Detection")
        self.menuThresholding = QtWidgets.QMenu(self.menuMenu)
        self.menuThresholding.setObjectName("menuThresholding")
        self.menuAdaptive_Thresholding = QtWidgets.QMenu(self.menuMenu)
        self.menuAdaptive_Thresholding.setObjectName("menuAdaptive_Thresholding")
        self.menuRotate = QtWidgets.QMenu(self.menuMenu)
        self.menuRotate.setObjectName("menuRotate")
        self.menuCropping = QtWidgets.QMenu(self.menuMenu)
        self.menuCropping.setObjectName("menuCropping")
        self.menuFlip = QtWidgets.QMenu(self.menuMenu)
        self.menuFlip.setObjectName("menuFlip")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionGrayScale = QtWidgets.QAction(MainWindow)
        self.actionGrayScale.setObjectName("actionGrayScale")
        self.actionLoG = QtWidgets.QAction(MainWindow)
        self.actionLoG.setObjectName("actionLoG")
        self.actionGamma = QtWidgets.QAction(MainWindow)
        self.actionGamma.setObjectName("actionGamma")
        self.actionMean = QtWidgets.QAction(MainWindow)
        self.actionMean.setObjectName("actionMean")
        self.actionGaussian = QtWidgets.QAction(MainWindow)
        self.actionGaussian.setObjectName("actionGaussian")
        self.actionMedian = QtWidgets.QAction(MainWindow)
        self.actionMedian.setObjectName("actionMedian")
        self.actionLaplacian_of_Gaussian = QtWidgets.QAction(MainWindow)
        self.actionLaplacian_of_Gaussian.setObjectName("actionLaplacian_of_Gaussian")
        self.actionBlur = QtWidgets.QAction(MainWindow)
        self.actionBlur.setObjectName("actionBlur")
        self.actionBox_Filter = QtWidgets.QAction(MainWindow)
        self.actionBox_Filter.setObjectName("actionBox_Filter")
        self.actionmedianBlur = QtWidgets.QAction(MainWindow)
        self.actionmedianBlur.setObjectName("actionmedianBlur")
        self.actionbilateralFilter = QtWidgets.QAction(MainWindow)
        self.actionbilateralFilter.setObjectName("actionbilateralFilter")
        self.actionGaussianBlur = QtWidgets.QAction(MainWindow)
        self.actionGaussianBlur.setObjectName("actionGaussianBlur")
        self.actionFiltte2D = QtWidgets.QAction(MainWindow)
        self.actionFiltte2D.setObjectName("actionFiltte2D")
        self.actionDirectional_Filtering = QtWidgets.QAction(MainWindow)
        self.actionDirectional_Filtering.setObjectName("actionDirectional_Filtering")
        self.actionThreshold_Median = QtWidgets.QAction(MainWindow)
        self.actionThreshold_Median.setObjectName("actionThreshold_Median")
        self.action_Zero_Crossing_of_Laplcian = QtWidgets.QAction(MainWindow)
        self.action_Zero_Crossing_of_Laplcian.setObjectName("action_Zero_Crossing_of_Laplcian")
        self.action_Canny = QtWidgets.QAction(MainWindow)
        self.action_Canny.setObjectName("action_Canny")
        self.actionSigma_and_Double_Thresholds = QtWidgets.QAction(MainWindow)
        self.actionSigma_and_Double_Thresholds.setObjectName("actionSigma_and_Double_Thresholds")
        self.actionBinary = QtWidgets.QAction(MainWindow)
        self.actionBinary.setObjectName("actionBinary")
        self.actionTozero = QtWidgets.QAction(MainWindow)
        self.actionTozero.setObjectName("actionTozero")
        self.actionTrunc = QtWidgets.QAction(MainWindow)
        self.actionTrunc.setObjectName("actionTrunc")
        self.actionOtsu = QtWidgets.QAction(MainWindow)
        self.actionOtsu.setObjectName("actionOtsu")
        self.actionGaussian_C = QtWidgets.QAction(MainWindow)
        self.actionGaussian_C.setObjectName("actionGaussian_C")
        self.actionMean_C = QtWidgets.QAction(MainWindow)
        self.actionMean_C.setObjectName("actionMean_C")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionResize = QtWidgets.QAction(MainWindow)
        self.actionResize.setObjectName("actionResize")
        self.action90_degrees = QtWidgets.QAction(MainWindow)
        self.action90_degrees.setObjectName("action90_degrees")
        self.action180 = QtWidgets.QAction(MainWindow)
        self.action180.setObjectName("action180")
        self.action60 = QtWidgets.QAction(MainWindow)
        self.action60.setObjectName("action60")
        self.actionCircle = QtWidgets.QAction(MainWindow)
        self.actionCircle.setObjectName("actionCircle")
        self.actionLeft_to_Right = QtWidgets.QAction(MainWindow)
        self.actionLeft_to_Right.setObjectName("actionLeft_to_Right")
        self.actionMirror = QtWidgets.QAction(MainWindow)
        self.actionMirror.setObjectName("actionMirror")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuConvert.addAction(self.actionGrayScale)
        self.menuConvert.addAction(self.actionLoG)
        self.menuConvert.addAction(self.actionGamma)
        self.menuFilter.addAction(self.actionMean)
        self.menuFilter.addAction(self.actionGaussian)
        self.menuFilter.addAction(self.actionMedian)
        self.menuFilter.addAction(self.actionLaplacian_of_Gaussian)
        self.menuFilter.addAction(self.actionBlur)
        self.menuFilter.addAction(self.actionBox_Filter)
        self.menuFilter.addAction(self.actionmedianBlur)
        self.menuFilter.addAction(self.actionbilateralFilter)
        self.menuFilter.addAction(self.actionGaussianBlur)
        self.menuFilter.addAction(self.actionFiltte2D)
        self.menuFilter.addAction(self.actionDirectional_Filtering)
        self.menuFilter.addAction(self.actionThreshold_Median)
        self.menuEdge_Detection.addAction(self.action_Zero_Crossing_of_Laplcian)
        self.menuEdge_Detection.addAction(self.action_Canny)
        self.menuEdge_Detection.addAction(self.actionSigma_and_Double_Thresholds)
        self.menuThresholding.addAction(self.actionBinary)
        self.menuThresholding.addAction(self.actionTozero)
        self.menuThresholding.addAction(self.actionTrunc)
        self.menuThresholding.addAction(self.actionOtsu)
        self.menuAdaptive_Thresholding.addAction(self.actionGaussian_C)
        self.menuAdaptive_Thresholding.addAction(self.actionMean_C)
        self.menuRotate.addAction(self.action180)
        self.menuRotate.addAction(self.action90_degrees)
        self.menuRotate.addAction(self.action60)
        self.menuCropping.addAction(self.actionCircle)
        self.menuFlip.addAction(self.actionLeft_to_Right)
        self.menuFlip.addAction(self.actionMirror)
        self.menuMenu.addAction(self.menuConvert.menuAction())
        self.menuMenu.addAction(self.menuFilter.menuAction())
        self.menuMenu.addAction(self.menuEdge_Detection.menuAction())
        self.menuMenu.addAction(self.menuThresholding.menuAction())
        self.menuMenu.addAction(self.menuAdaptive_Thresholding.menuAction())
        self.menuMenu.addAction(self.menuRotate.menuAction())
        self.menuMenu.addAction(self.menuCropping.menuAction())
        self.menuMenu.addAction(self.menuFlip.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)

        self.actionOpen.triggered.connect(self.openFile)
        self.actionSave.triggered.connect(self.saveFile)           
        self.actionGrayScale.triggered.connect(self.grayScale)
        self.actionLoG.triggered.connect(self.LoG)
        self.actionGamma.triggered.connect(self.Gamma)
        self.actionMean.triggered.connect(self.Mean)
        self.actionGaussian.triggered.connect(self.Gaussian)
        self.actionMedian.triggered.connect(self.Median)
        self.actionLaplacian_of_Gaussian.triggered.connect(self.lapcianOfGaussian)
        self.actionBlur.triggered.connect(self.Blur)
        self.actionBox_Filter.triggered.connect(self.BoxFilter)
        self.actionmedianBlur.triggered.connect(self.MedianBlur)
        self.actionbilateralFilter.triggered.connect(self.BilateralFilter)
        self.actionGaussianBlur.triggered.connect(self.GaussianBlur)
        self.actionFiltte2D.triggered.connect(self.Filter2D)
        self.actionDirectional_Filtering.triggered.connect(self.DirectionalFiltering)
        self.actionThreshold_Median.triggered.connect(self.ThresholdMedian)
        self.action_Zero_Crossing_of_Laplcian.triggered.connect(self.ZeroCrossingOfLaplcian)
        self.action_Canny.triggered.connect(self.Canny)
        self.actionSigma_and_Double_Thresholds.triggered.connect(self.SigmaAndDoubleThresholds)
        self.actionBinary.triggered.connect(self.Brinary)
        self.actionTozero.triggered.connect(self.Tozero)
        self.actionTrunc.triggered.connect(self.Trunc)
        self.actionOtsu.triggered.connect(self.Otsu)
        self.actionGaussian_C.triggered.connect(self.Gaussian_C)
        self.actionMean_C.triggered.connect(self.Mean_C)
        self.action180.triggered.connect(self.Rotate180)
        self.action90_degrees.triggered.connect(self.Rotate90)
        self.action60.triggered.connect(self.Rotate60)
        self.actionCircle.triggered.connect(self.CropCircle)
        self.actionLeft_to_Right.triggered.connect(self.FlipLeftToRight)
        self.actionMirror.triggered.connect(self.Mirror)



        self.verticalSlider.valueChanged['int'].connect(self.brightness_value)
        self.verticalSlider_2.valueChanged['int'].connect(self.blur_value)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.filename = None 
        self.tmp = None 
        self.brightness_value_now = 0 
        self.blur_value_now = 0 

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Brightness"))
        self.label_2.setText(_translate("MainWindow", "Blur"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.menuConvert.setTitle(_translate("MainWindow", "Convert"))
        self.menuFilter.setTitle(_translate("MainWindow", "Filter"))
        self.menuEdge_Detection.setTitle(_translate("MainWindow", "Edge Detection"))
        self.menuThresholding.setTitle(_translate("MainWindow", "Thresholding"))
        self.menuAdaptive_Thresholding.setTitle(_translate("MainWindow", "Adaptive Thresholding"))
        self.menuRotate.setTitle(_translate("MainWindow", "Rotate"))
        self.menuCropping.setTitle(_translate("MainWindow", "Cropping"))
        self.menuFlip.setTitle(_translate("MainWindow", "Flip"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionGrayScale.setText(_translate("MainWindow", "GrayScale"))
        self.actionLoG.setText(_translate("MainWindow", "LoG"))
        self.actionGamma.setText(_translate("MainWindow", "Gamma"))
        self.actionMean.setText(_translate("MainWindow", "Mean"))
        self.actionGaussian.setText(_translate("MainWindow", "Gaussian"))
        self.actionMedian.setText(_translate("MainWindow", "Median"))
        self.actionLaplacian_of_Gaussian.setText(_translate("MainWindow", "Laplacian of Gaussian"))
        self.actionBlur.setText(_translate("MainWindow", "Blur"))
        self.actionBox_Filter.setText(_translate("MainWindow", "boxFilter"))
        self.actionmedianBlur.setText(_translate("MainWindow", "medianBlur"))
        self.actionbilateralFilter.setText(_translate("MainWindow", "bilateralFilter"))
        self.actionGaussianBlur.setText(_translate("MainWindow", "GaussianBlur"))
        self.actionFiltte2D.setText(_translate("MainWindow", "Filtte2D"))
        self.actionDirectional_Filtering.setText(_translate("MainWindow", "Directional Filtering"))
        self.actionThreshold_Median.setText(_translate("MainWindow", "Threshold Median"))
        self.action_Zero_Crossing_of_Laplcian.setText(_translate("MainWindow", " Zero-Crossing of Laplcian"))
        self.action_Canny.setText(_translate("MainWindow", " Canny"))
        self.actionSigma_and_Double_Thresholds.setText(_translate("MainWindow", "Sigma and Double Thresholds"))
        self.actionBinary.setText(_translate("MainWindow", "Binary"))
        self.actionTozero.setText(_translate("MainWindow", "Tozero"))
        self.actionTrunc.setText(_translate("MainWindow", "Trunc"))
        self.actionOtsu.setText(_translate("MainWindow", "Otsu"))
        self.actionGaussian_C.setText(_translate("MainWindow", "Gaussian_C"))
        self.actionMean_C.setText(_translate("MainWindow", "Mean_C"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionResize.setText(_translate("MainWindow", "Resize"))
        self.action90_degrees.setText(_translate("MainWindow", "90°"))
        self.action180.setText(_translate("MainWindow", "180°"))
        self.action60.setText(_translate("MainWindow", "60°"))
        self.actionCircle.setText(_translate("MainWindow", "Circle"))
        self.actionLeft_to_Right.setText(_translate("MainWindow", "Left to Right"))
        self.actionMirror.setText(_translate("MainWindow", "Mirror"))

    def openFile(self):
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.displayImage(self.image)

    def displayImage(self, image):
        self.tmp = image
        if image.shape[1] < 500:
            image = imutils.resize(image, width = 500)
        else:
            image = imutils.resize(image, width = 700)
                        
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.label_Image.setPixmap(QtGui.QPixmap.fromImage(image))
    
    def brightness_value(self,value):
        self.brightness_value_now = value
        print('Brightness: ',value)
        self.update()

    def blur_value(self,value):
        self.blur_value_now = value
        print('Blur: ',value)
        self.update()

    def changeBrightness(self,img,value):	
        hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        h,s,v = cv2.split(hsv)
        lim = 255 - value
        v[v>lim] = 255
        v[v<=lim] += value
        final_hsv = cv2.merge((h,s,v))
        img = cv2.cvtColor(final_hsv,cv2.COLOR_HSV2BGR)
        return img

    def changeBlur(self,img,value):
        kernel_size = (value+1,value+1) 
        img = cv2.blur(img,kernel_size)
        return img

    def update(self):
        if self.filename == None:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please Open Image First")
            msg.setIcon(QMessageBox.Critical)
            msg.exec_()                   
        else:
            img = self.changeBrightness(self.image,self.brightness_value_now)
            img = self.changeBlur(img,self.blur_value_now)
            self.displayImage(img)

    def saveFile(self):
        if self.filename == None:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please Open Image First")
            msg.setIcon(QMessageBox.Critical)
            msg.exec_()                   
        else:
            filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
            cv2.imwrite(filename,self.tmp)
            print("file save in:" ,filename)
   
    def grayScale(self):
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        self.displayImage(self.image)
    
    def LoG(self):
        c = 10
        log_transform = c* np . log ( 1 + self.image )
        c = np.array(log_transform, dtype = np.uint8)
        self.displayImage(c)

    def Gamma(self):
        gamma = 2.2
        gamma_correction = np.array(255*(self.image / 255) ** gamma, dtype = 'uint8')
        self.displayImage(gamma_correction)

    def Mean(self):
        ksize = 20
        kernel = np.ones((ksize, ksize))
        kernel /= kernel.size
        mean_filter = cv2.filter2D(self.image, -1, kernel)
        self.displayImage(mean_filter)

    def Gaussian(self):
        ksize = 20
        kernel = cv2.getGaussianKernel(ksize, -1)
        gaussian_filter = cv2.filter2D(self.image, -1, kernel)
        self.displayImage(gaussian_filter)

    def Median(self):
        ksize = 5
        median_filter = cv2.medianBlur(self.image, ksize)
        self.displayImage(median_filter)
        

    def lapcianOfGaussian(self):
        # img = cv2.imread(self.filename)
        # img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # img = cv2.GaussianBlur(img, (3,3), 0)
        # laplacian = cv2.Laplacian(img, cv2.CV_64F)
        # laplacian = np.uint8(np.absolute(laplacian))
        # self.displayImage(laplacian)
        img = cv2.imread(self.filename)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        laplacian = cv2.Laplacian(img, cv2.CV_64F)
        laplacian = np.uint8(np.absolute(laplacian))
        ret,th1 = cv2.threshold(laplacian,127,255,cv2.THRESH_BINARY)
        self.displayImage(th1)

    def Blur(self):
        img = cv2.imread(self.filename)
        img = cv2.blur(img, (3,3))
        self.displayImage(img)

    def BoxFilter(self):
        img = cv2.imread(self.filename)
        img = cv2.boxFilter(img, -1, (3,3))
        self.displayImage(img)

    def MedianBlur(self):
        img = cv2.imread(self.filename)
        img = cv2.medianBlur(img, 5)
        self.displayImage(img)
 
    def BilateralFilter(self):
        img = cv2.imread(self.filename)
        img = cv2.bilateralFilter(img, 9, 75, 75)
        self.displayImage(img)

    def GaussianBlur(self):
        img = cv2.imread(self.filename)
        img = cv2.GaussianBlur(img, (5,5), 0)
        self.displayImage(img)

    def Filter2D(self):
        img = cv2.imread(self.filename)
        kernel = np.ones((7,7), np.float32)/49
        img = cv2.filter2D(img, -1, kernel)
        self.displayImage(img)
    
    def DirectionalFiltering (self):
        img = cv2.imread(self.filename)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        kernel = np.array([[-1, -1, -1], [0, 0, 0], [1, 1, 1]])
        opencvOutput = cv2.filter2D(gray, -1, kernel)
        self.displayImage(opencvOutput)

    def ThresholdMedian(self):
        img = cv2.imread(self.filename)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        img = cv2.medianBlur(img, 5)
        ret,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)
        th2 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,\
                cv2.THRESH_BINARY,11,2)
        th3 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
                cv2.THRESH_BINARY,11,2)
        self.displayImage(th3)

    def ZeroCrossingOfLaplcian(self):
        LoG = cv2.Laplacian(self.image, cv2.CV_64F)
        minLoG = cv2.morphologyEx(LoG, cv2.MORPH_ERODE, np.ones((3, 3), np.uint8))
        maxLoG = cv2.morphologyEx(LoG, cv2.MORPH_DILATE, np.ones((3, 3), np.uint8))
        zeroCross = np.logical_or(np.logical_and(LoG > 0, minLoG < 0), np.logical_and(LoG < 0, maxLoG > 0))
        zeroCross = np.uint8(zeroCross) * 255
        self.displayImage(zeroCross)
    
    def Canny(self):
        img = cv2.imread(self.filename)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(img,100,200)
        self.displayImage(edges)

    def SigmaAndDoubleThresholds(self):
        sigmaArray = [math.sqrt(2), math.sqrt(8), math.sqrt(32)]
        lowThreshold = 0.5
        highThreshold = 0.9
        for sigma in sigmaArray:
            gaussian = cv2.GaussianBlur(self.image, (0, 0), sigma)
            canny = cv2.Canny(gaussian, lowThreshold, highThreshold)
        self.displayImage(canny)

    def Brinary(self):
        img = cv2.threshold(self.image,127,255,cv2.THRESH_BINARY)[1]
        self.displayImage(img)

    def Tozero(self):
        img = cv2.threshold(self.image,127,255,cv2.THRESH_TOZERO)[1]
        self.displayImage(img)

    def Trunc(self):
        gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        Trunc = cv2.threshold(gray, 127, 255, cv2.THRESH_TRUNC)[1]
        self.displayImage(Trunc)

    def Otsu(self):
        gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5, 5), 0)
        img = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]
        self.displayImage(img)
    
    def Gaussian_C(self):
        gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        medianBlur = cv2.medianBlur(gray,5)
        Gaussian_C = cv2.adaptiveThreshold(medianBlur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
        self.displayImage(Gaussian_C)

    def Mean_C(self):
        gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        medianBlur = cv2.medianBlur(gray,5)
        Mean_C = cv2.adaptiveThreshold(medianBlur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)
        self.displayImage(Mean_C)

    def Rotate180(self):
        img = cv2.imread(self.filename)
        img = cv2.rotate(img, cv2.ROTATE_180)
        self.displayImage(img)

    def Rotate90(self):
        img = cv2.imread(self.filename)
        img = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)
        self.displayImage(img)

    def Rotate60(self):
        img = cv2.imread(self.filename)
        rows,cols = img.shape[:2]
        M = cv2.getRotationMatrix2D((cols/2,rows/2),60,1)
        img = cv2.warpAffine(img,M,(cols,rows))
        self.displayImage(img)

               
    def CropCircle(self):
        img = cv2.imread(self.filename)
        rows,cols = img.shape[:2]
        mask = np.zeros((rows,cols), np.uint8)
        cv2.circle(mask,(int(cols/2),int(rows/2)),int(rows/2),255,-1)
        masked_data = cv2.bitwise_and(img,img,mask = mask)
        self.displayImage(masked_data)

    def FlipLeftToRight(self):
        img = cv2.imread(self.filename)
        img = cv2.flip(img, 1)
        self.displayImage(img)

    def Mirror(self):
       for x in range(0, self.image.shape[0]):
        a = self.image[x, :]
        for y in range(0, self.image.shape[1]):
            pixel= self.image[x, y]
            self.image[x, y] = a[self.image.shape[1] - y - 1]
            a-=1
        self.displayImage(self.image)
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
